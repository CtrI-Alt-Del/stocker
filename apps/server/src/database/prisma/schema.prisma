generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum InventoryMovementType {
  INBOUND
  OUTBOUND
}

enum RolePermissionName {
  INVENTORY_MOVEMENTS
  PRODUCTS_CONTROL
  CATEGORIES_CONTROL
  CSV_EXPORT
  LOCATIONS_CONTROL
  NOTIFICATIONS_CONTROL
  SUPPLIERS_CONTROL
  REPORTS
  ALL
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  image         String
  cost_price    Int
  selling_price Int
  brand         String
  height        Int
  length        Int
  weight        Int
  width         Int
  uom           String
  code          String
  minimum_stock Int
  is_active     Boolean  @default(true)
  model         String?
  location_id   String?
  category_id   String?
  supplier_id   String?
  company_id    String
  registered_at DateTime @default(now())

  location               Location?                @relation(fields: [location_id], references: [id])
  category               Category?                @relation(fields: [category_id], references: [id])
  supplier               Supplier?                @relation(fields: [supplier_id], references: [id])
  company                Company                  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  batches                Batch[]
  inventoryMovements     InventoryMovement[]
  stockLevelNotification StockLevelNotification[]

  @@map("products")
}

model Batch {
  id                         String                       @id @default(uuid())
  code                       String
  expiration_date            DateTime?
  maximum_days_to_expiration Int?
  items_count                Int
  product_id                 String
  registered_at              DateTime                     @default(now())
  product                    Product                      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  expirationDateNotification ExpirationDateNotification[]

  @@map("batches")
}

model InventoryMovement {
  id            String                @id @default(uuid())
  movement_type InventoryMovementType @default(INBOUND)
  items_count   Int
  product_id    String
  user_id       String
  remark        String?
  registered_at DateTime

  Product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("inventory_movements")
}

model User {
  id                       String   @id @default(uuid())
  email                    String   @unique()
  role_id                  String
  name                     String
  password                 String
  has_first_password_reset Boolean  @default(true)
  company_id               String
  registered_at            DateTime @default(now())

  company            Company?            @relation(fields: [company_id], references: [id], onDelete: Cascade)
  role               Role?               @relation(fields: [role_id], references: [id], onDelete: Cascade)
  inventoryMovements InventoryMovement[]

  @@map("users")
}

model Company {
  id   String @id @default(uuid())
  name String @unique()
  cnpj String @unique()

  users      User[]
  product    Product[]
  location   Location[]
  suppliers  Supplier[]
  categories Category[]

  @@map("companies")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique()
  permissions RolePermission[]
  User        User[]

  @@map("roles")
}

model RolePermission {
  id         String             @id @default(uuid())
  name       RolePermissionName
  role_id    String
  company_id String

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@map("role_permission")
}

model Category {
  id                 String   @id @default(uuid())
  name               String
  parent_category_id String?
  company_id         String
  registered_at      DateTime @default(now())

  parentCategory Category?  @relation("CategoryParent", fields: [parent_category_id], references: [id], onDelete: Cascade)
  subCategories  Category[] @relation("CategoryParent")
  product        Product[]
  company        Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("categories")
}

model Supplier {
  id            String   @id @default(uuid())
  name          String
  email         String
  cnpj          String?
  phone         String?
  company_id    String
  registered_at DateTime @default(now())

  company  Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  products Product[]

  @@map("suppliers")
}

model Location {
  id                 String   @id @default(uuid())
  name               String
  parent_location_id String?
  company_id         String
  registered_at      DateTime @default(now())

  parentLocation Location?  @relation("LocationParent", fields: [parent_location_id], references: [id], onDelete: Cascade)
  subLocation    Location[] @relation("LocationParent")
  company        Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Product        Product[]

  @@map("locations")
}

model StockLevelNotification {
  id            String   @id @default(uuid())
  product_id    String
  company_id    String
  registered_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("stock_level_notifications")
}

model ExpirationDateNotification {
  id            String   @id @default(uuid())
  company_id    String
  batch_id      String
  registered_at DateTime @default(now())

  batch Batch @relation(fields: [batch_id], references: [id], onDelete: Cascade)

  @@map("expiration_date_notification")
}
