generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum InventoryMovementType {
  INBOUND
  OUTBOUND
}

model Products {
  id                String                 @id @default(uuid())
  name              String
  description       String
  image             String
  cost_price        BigInt
  selling_price     BigInt
  brand             String
  height            BigInt
  length            BigInt
  weight            BigInt
  width             BigInt
  uom               String
  code              String
  minimum_stock     BigInt
  category_id       String?
  company_id        String

  Category          Categories?            @relation(fields: [category_id], references: [id])
  Company           Companies              @relation(fields: [company_id], references: [id])
  batches           Batches[]
  inventoryMovements InventoryMovements[]
  notifications     Notifications[]        

  @@map("products")
}

model Batches {
  id                String                 @id @default(uuid())
  code              String
  expiration_date   DateTime?
  quantity          BigInt
  product_id        String

  Product           Products               @relation(fields: [product_id], references: [id])
  notifications     Notifications[]        @relation(name: "BatchesToNotifications")

  @@map("batches")
}

model InventoryMovements {
  id                String                 @id @default(uuid())
  type              InventoryMovementType  @default(INBOUND)
  quantity          BigInt
  product_id        String    
  user_id           String    
  movemented_at     DateTime

  Product           Products               @relation(fields: [product_id], references: [id])
  User              Users                  @relation(fields: [user_id], references: [id])

  @@map("inventory_movements")
}

model Users {
  id                String                 @id @default(uuid())
  email             String
  role              String
  name              String
  company_id        String?

  Company           Companies?             @relation(fields: [company_id], references: [id])
  inventoryMovements InventoryMovements[]

  @@map("users")
}

model Companies {
  id                String                 @id @default(uuid())
  name              String

  users             Users[]
  products          Products[]
  locations         Locations[]
  suppliers         Suppliers[]
  categories        Categories[]

  @@map("companies")
}

model Categories {
  id                String                 @id @default(uuid())
  name              String
  parent_category_id String?
  company_id        String

  parentCategory    Categories?            @relation("CategoryParent", fields: [parent_category_id], references: [id])
  subCategories     Categories[]           @relation("CategoryParent")
  products          Products[]
  company           Companies              @relation(fields: [company_id], references: [id])

  @@map("categories")
}

model Suppliers {
  id                String                 @id @default(uuid())
  name              String
  email             String
  company_id        String

  Company           Companies              @relation(fields: [company_id], references: [id])

  @@map("suppliers")
}

model Locations {
  id                 String                @id @default(uuid())
  parent_location_id String?
  company_id         String

  ParentLocation     Locations?            @relation("LocationParent", fields: [parent_location_id], references: [id], onDelete: Cascade)
  subLocations       Locations[]           @relation("LocationParent")
  Company            Companies             @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("locations")
}

model Notifications {
  id          String    @id @default(uuid())
  product_id  String?
  batch_id    String?
  created_at  DateTime  @default(now())

  Product     Products? @relation(fields: [product_id], references: [id])
  Batch       Batches?  @relation(name: "BatchesToNotifications", fields: [batch_id], references: [id])

  @@map("notifications")
}